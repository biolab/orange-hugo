<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on Orange</title><link>/blog/development/</link><description>Recent content in development on Orange</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/blog/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Dask all Folks: preparing large datasets</title><link>/blog/2023/2023-10-24-dask-all-folks/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>/blog/2023/2023-10-24-dask-all-folks/</guid><description>Today, we will delve into the exciting world of Dask once again, and explore how to finally bring your own data into Orange. Or, more precisely, into an experimental version of Orange that supports Dask.
If you&amp;rsquo;ve already set up your data as an Orange Table and you would just like to re-encode it to better support dask, then all you have to do is export it again as a .</description></item><item><title>A dash of Dask</title><link>/blog/2023/2023-08-31-a-dash-of-dask/</link><pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate><guid>/blog/2023/2023-08-31-a-dash-of-dask/</guid><description>It&amp;rsquo;s been a while since our last progress update onÂ Dask, and quite a bit has happened since. Most noticeably, we&amp;rsquo;ve got some more visualization widgets working, but I leave that for another blog post. Today, I want to focus on our updated machine-learning methods. K-Means, PCA, Naive Bayes, Linear, and Logistic Regression are now running. Well, maybe not flawlessly, but hey, they work.
Currently, most of Orange&amp;rsquo;s learners wrap existing scikit-learn methods.</description></item><item><title>Interval Sliders</title><link>/blog/2023/2023-03-10-interval-slider/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/2023/2023-03-10-interval-slider/</guid><description>This post is not about the Heat Map widget. It&amp;rsquo;s about the new double-handled slider at the top of the heatmap. Not about what it does, but about how it does it. The post should be interesting to readers with some knowledge of Qt. Others, who won&amp;rsquo;t understand it, are expected to be impressed by the complexity of implementing something as simple as adding another handle to a slider. On the other hand (wait for the pun!</description></item><item><title>Meet Trubar, a friend of Orange</title><link>/blog/2023/2023-01-17-trubar/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>/blog/2023/2023-01-17-trubar/</guid><description>Orange has been translated to Slovenian language (no official release yet: rough corners are very much being polished). This will pave the way for translations into other languages.
What do we use? Gettext, right? Wrong. Orange is written in modern Python and uses f-strings for string interpolation. They are great, but don&amp;rsquo;t play well with gettext.
Why gettext doesn&amp;rsquo;t cut it If you&amp;rsquo;ve never heard about gettext: gettext is a popular framework for software localization.</description></item><item><title>Compiling Orange 2 on modern Linux</title><link>/blog/2022/2022-01-10-orange2/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/2022/2022-01-10-orange2/</guid><description>We abandoned Orange 2 in 2015 because we did not have enough resources to split between maintaining Orange 2 and building the new version from scratch. Orange was due for a rewrite for quite some time. The core of the pre-3 Orange was written mainly in C++. When Orange was conceived, extending Python with C was the only option to make it run fast enough. Orange was designed before NumPy and even before NumPy&amp;rsquo;s predecessors, Numarray and Numeric.</description></item></channel></rss>