<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>feature engineering on Orange</title>
    <link>/blog/feature-engineering/</link>
    <description>Recent content in feature engineering on Orange</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Feb 2017 13:16:37 +0000</lastBuildDate>
    
	<atom:link href="/blog/feature-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>For When You Want to Transpose a Data Table...</title>
      <link>/blog/2017/02/03/for-when-you-want-to-transpose-a-data-table/</link>
      <pubDate>Fri, 03 Feb 2017 13:16:37 +0000</pubDate>
      
      <guid>/blog/2017/02/03/for-when-you-want-to-transpose-a-data-table/</guid>
      <description>Sometimes, you need something more. Something different. Something, that helps you look at the world from a different perspective. Sometimes, you simply need to transpose your data.
Since version 3.3.9, Orange has a Transpose widget that flips your data table around. Columns become rows and rows become columns. This is often useful, if you have, say, biological data.
Related: Datasets in Orange Bioinformatics
Today we will play around with brown-selected.tab, a data set on gene expression levels for 79 experiments.</description>
    </item>
    
    <item>
      <title>Data Preparation for Machine Learning</title>
      <link>/blog/2017/01/13/data-preparation-for-machine-learning/</link>
      <pubDate>Fri, 13 Jan 2017 09:25:58 +0000</pubDate>
      
      <guid>/blog/2017/01/13/data-preparation-for-machine-learning/</guid>
      <description>We&amp;rsquo;ve said it numerous times and we&amp;rsquo;re going to say it again. Data preparation is crucial for any data analysis. If your data is messy, there&amp;rsquo;s no way you can make sense of it, let alone a computer. Computers are great at handling large, even enormous data sets, speedy computing and recognizing patterns. But they fail miserably if you give them the wrong input. Also some classification methods work better with binary values, other with continuous, so it is important to know how to treat your data properly.</description>
    </item>
    
  </channel>
</rss>