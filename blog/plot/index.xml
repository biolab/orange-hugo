<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plot on Orange</title>
    <link>/blog/plot/</link>
    <description>Recent content in plot on Orange</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jul 2016 11:52:54 +0000</lastBuildDate>
    
	<atom:link href="/blog/plot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythagorean Trees and Forests</title>
      <link>/blog/2016/07/29/pythagorean-trees-and-forests/</link>
      <pubDate>Fri, 29 Jul 2016 11:52:54 +0000</pubDate>
      
      <guid>/blog/2016/07/29/pythagorean-trees-and-forests/</guid>
      <description>Classification Trees are great, but how about when they overgrow even your 27&amp;rsquo;&amp;rsquo; screen? Can we make the tree fit snugly onto the screen and still tell the whole story? Well, yes we can.
Pythagorean Tree widget will show you the same information as Classification Tree, but way more concisely. Pythagorean Trees represent nodes with squares whose size is proportionate to the number of covered training instances. Once the data is split into two subsets, the corresponding new squares form a right triangle on top of the parent square.</description>
    </item>
    
    <item>
      <title>Univariate GSoC Success</title>
      <link>/blog/2016/04/14/univariate-gsoc-success/</link>
      <pubDate>Thu, 14 Apr 2016 08:55:14 +0000</pubDate>
      
      <guid>/blog/2016/04/14/univariate-gsoc-success/</guid>
      <description>Google Summer of Code application period has come to an end. We&amp;rsquo;ve received 34 applications, some of which were of truly high quality. Now it&amp;rsquo;s upon us to select the top performing candidates, but before that we wanted to have an overlook of the candidate pool. We&amp;rsquo;ve gathered data from our Google Form application and gave it a quick view in Orange.
First, we needed to preprocess the data a bit, since it came in a messy form of strings.</description>
    </item>
    
    <item>
      <title>All I See is Silhouette</title>
      <link>/blog/2016/03/23/all-i-see-is-silhouette/</link>
      <pubDate>Wed, 23 Mar 2016 09:09:26 +0000</pubDate>
      
      <guid>/blog/2016/03/23/all-i-see-is-silhouette/</guid>
      <description>Silhouette plot is such a nice method for visually assessing cluster quality and the degree of cluster membership that we simply couldn&amp;rsquo;t wait to get it into Orange3. And now we did.
What this visualization displays is the average distance between instances within the cluster and instances in the nearest cluster. For a given data instance, the silhouette close to 1 indicates that the data instance is close to the center of the cluster.</description>
    </item>
    
    <item>
      <title>Overfitting and Regularization</title>
      <link>/blog/2016/03/12/overfitting-and-regularization/</link>
      <pubDate>Sat, 12 Mar 2016 16:48:38 +0000</pubDate>
      
      <guid>/blog/2016/03/12/overfitting-and-regularization/</guid>
      <description>A week ago I used Orange to explain the effects of regularization. This was the second lecture in the Data Mining class, the first one was on linear regression. My introduction to the benefits of regularization used a simple data set with a single input attribute and a continuous class. I drew a data set in Orange, and then used Polynomial Regression widget (from Prototypes add-on) to plot the linear fit.</description>
    </item>
    
    <item>
      <title>Color it!</title>
      <link>/blog/2015/12/28/color-it/</link>
      <pubDate>Mon, 28 Dec 2015 10:47:00 +0000</pubDate>
      
      <guid>/blog/2015/12/28/color-it/</guid>
      <description>Holiday season is upon us and even the Orange team is in a festive mood. This is why we made a Color widget!
This fascinating artsy widget will allow you to play with your data set in a new and exciting way. No more dull visualizations and default color schemes! Set your own colors the way YOU want it to! Care for some magical cyan-to-magenta? Or do you prefer a more festive red-to-green?</description>
    </item>
    
    <item>
      <title>Hierarchical Clustering: A Simple Explanation</title>
      <link>/blog/2015/12/02/hierarchical-clustering-a-simple-explanation/</link>
      <pubDate>Wed, 02 Dec 2015 13:37:49 +0000</pubDate>
      
      <guid>/blog/2015/12/02/hierarchical-clustering-a-simple-explanation/</guid>
      <description>One of the key techniques of exploratory data mining is clustering – separating instances into distinct groups based on some measure of similarity. We can estimate the similarity between two data instances through euclidean (pythagorean), manhattan (sum of absolute differences between coordinates) and mahalanobis distance (distance from the mean by standard deviation), or, say, through Pearson correlation or Spearman correlation.
Our main goal when clustering data is to get groups of data instances where:</description>
    </item>
    
    <item>
      <title>Learn with Paint Data</title>
      <link>/blog/2015/07/10/learn-with-paint-data/</link>
      <pubDate>Fri, 10 Jul 2015 07:00:54 +0000</pubDate>
      
      <guid>/blog/2015/07/10/learn-with-paint-data/</guid>
      <description>Paint Data widget might initially look like a kids’ game, but in combination with other Orange widgets it becomes a very simple and useful tool for conveying statistical concepts, such as k-means, hierarchical clustering and prediction models (like SVM, logistical regression, etc.).
The widget enables you to draw your data on a 2-D plane. You can name the x and y axes, select the number of classes (which are represented by different colors) and then position the points on a graph.</description>
    </item>
    
    <item>
      <title>GSoC Review: Visualizations with Qt</title>
      <link>/blog/2011/09/03/gsoc-review-visualizations-with-qt/</link>
      <pubDate>Sat, 03 Sep 2011 08:28:00 +0000</pubDate>
      
      <guid>/blog/2011/09/03/gsoc-review-visualizations-with-qt/</guid>
      <description>During the course of this summer, I created a new plotting library for Orange plot, replacing the use of PyQwt. I can say that I have succesfully completed my project, but the library (and especially the visualization widgets) could still use some more work. The new library supports a similar interface, so little change is needed to convert individual widgets, but it also has several advantages over the old implementation:</description>
    </item>
    
  </channel>
</rss>